#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)

	СвойстваНоменклатуры = СвойстваНоменклатуры(Номенклатура);

	// регистр АктивныеПосещения
	Движения.АктивныеПосещения.Записывать = Истина;
	Движение = Движения.АктивныеПосещения.Добавить();
	Движение.Период = Дата;
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Основание = Ссылка;
	Движение.ВидАттракциона = СвойстваНоменклатуры.ВидАттракциона;
	Движение.КоличествоПосещений = СвойстваНоменклатуры.КоличествоПосещений;
	
	// регистр Продажи
	Движения.Продажи.Записывать = Истина;
	Движение = Движения.Продажи.Добавить();
	Движение.Период = Дата;
	Движение.Клиент = Клиент;
	Движение.ВидАттракциона = СвойстваНоменклатуры.ВидАттракциона;
	Движение.Сумма = СуммаДокумента;

	НачислитьСписатьБонусныеБаллы(Отказ);
	
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора, внесенные вручную данные будут утеряны!
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МаксималнаяДоля = Константы.МаксимльнаяДоляОплатыБаллами.Получить();

	Если БаллыКСписанию <> 0 Тогда
		Если БаллыКСписанию > Цена Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Баллы не должны превышать цену билета";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Поле = "БаллыКСписанию";
			Сообщение.Сообщить();
		КонецЕсли;

		Если Цена <> 0 Тогда
			Доля = БаллыКСписанию / Цена * 100;
			Если Доля > МаксималнаяДоля Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон("Доля списываемых баллов от цены больше допустимой (%1%%)", МаксималнаяДоля);
				Сообщение.УстановитьДанные(ЭтотОбъект);
				Сообщение.Поле = "БаллыКСписанию";
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НачислитьСписатьБонусныеБаллы(Отказ)

	Движения.БонусныеБаллыКлиентов.Записывать = Истина;

	Если Не ЗначениеЗаполнено(Клиент) Тогда
		Возврат;
	КонецЕсли;

	СуммаПокупокКлиента = СуммаПокупокКлиента();

	ДоляНакапливаемыхБаллов = ДоляНакапливаемыхБаллов(СуммаПокупокКлиента);

	БаллыКНакоплению = СуммаДокумента * ДоляНакапливаемыхБаллов / 100;

	Если БаллыКНакоплению <> 0 Тогда
		Движение = Движения.БонусныеБаллыКлиентов.ДобавитьПриход();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Сумма = БаллыКНакоплению;
	КонецЕсли;

	Если БаллыКСписанию <> 0 Тогда
		Движение = Движения.БонусныеБаллыКлиентов.ДобавитьРасход();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Сумма = БаллыКСписанию;
	КонецЕсли;

	Движения.Записать();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БонусныеБаллыКлиентовОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.БонусныеБаллыКлиентов.Остатки(&Период, Клиент = &Клиент) КАК БонусныеБаллыКлиентовОстатки
	|ГДЕ
	|	БонусныеБаллыКлиентовОстатки.СуммаОстаток < 0";

	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени()));

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Не хватавт баллов для списания, на баллансе %1", Выборка.СуммаОстаток
			+ БаллыКСписанию);
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Поле = "БаллыКСписанию";
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

Функция СвойстваНоменклатуры(Номенклатура)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.ВидАттракциона,
	|	Номенклатура.КоличествоПосещений
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Выборка = Запрос.Выполнить().Выбрать();

	Выборка.Следующий();

	Результат = Новый Структура;
	Результат.Вставить("ВидАттракциона", Выборка.ВидАттракциона);
	Результат.Вставить("КоличествоПосещений", Выборка.КоличествоПосещений);
	Возврат Результат;

КонецФункции

Функция СуммаПокупокКлиента()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПродажиОбороты.СуммаОборот
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, &КонецПериода,, Клиент = &Клиент) КАК ПродажиОбороты";

	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Клиент", Клиент);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаОборот;
	КонецЕсли;

	Возврат 0;

КонецФункции

Функция ДоляНакапливаемыхБаллов(СуммаПокупокКлиента)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШкалаБонуснойПрограммыДиапозоны.ПроцентНакопления
	|ИЗ
	|	РегистрСведений.АктуальнаяШкалаБонуснойПрограмы.СрезПоследних(&Период,) КАК
	|		АктуальнаяШкалаБонуснойПрограмыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ШкалаБонуснойПрограммы.Диапозоны КАК ШкалаБонуснойПрограммыДиапозоны
	|		ПО АктуальнаяШкалаБонуснойПрограмыСрезПоследних.Шкала = ШкалаБонуснойПрограммыДиапозоны.Ссылка
	|ГДЕ
	|	ШкалаБонуснойПрограммыДиапозоны.НижнаяГраница <= &СуммаПокупокКлиента
	|	И (ШкалаБонуснойПрограммыДиапозоны.ВерхнаяГраница > &СуммаПокупокКлиента
	|	ИЛИ ШкалаБонуснойПрограммыДиапозоны.ВерхнаяГраница = 0)";

	Запрос.УстановитьПараметр("СуммаПокупокКлиента", СуммаПокупокКлиента);
	Запрос.УстановитьПараметр("Период", Дата);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПроцентНакопления;
	КонецЕсли;

	Возврат 0;

КонецФункции

#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли